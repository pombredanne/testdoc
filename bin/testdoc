#!/usr/bin/python

import inspect
import os
import sys

# This makes sure that users don't have to set up their environment specially
# in order to run these programs from bin/.
if os.path.abspath(sys.argv[0]).find(os.sep+'Testdoc') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
if getattr(os, "getuid", 0) != 0:
    sys.path.insert(0, os.curdir)

from testdoc import documenter, finder, formatter, reflect


def usage():
    return "Usage: testdoc <fully-qualified module name>"


def string_to_module(argument):
    if os.path.exists(argument):
        return reflect.filenameToModule(argument)
    obj = reflect.namedAny(argument)
    if not inspect.ismodule(obj):
        raise ValueError('%r is not a Python module' % (argument,))
    return obj


def make_options():
    from optparse import OptionParser
    parser = OptionParser(
        usage="usage: %prog [options] <fully-qualified module name>")
    format_choices = sorted(formats.keys())
    parser.add_option("-f", "--format", dest="format",
        choices=format_choices, metavar="FORMAT",
        help="Format to emit.  One of: " + ', '.join(format_choices),
        default="moin")
    return parser


formats = {
    'moin': formatter.WikiFormatter,
    'rest': formatter.ReSTFormatter,
    'trial': formatter.TrialLikeTreeFormatter,
    }


def main():
    parser = make_options()
    (options, args) = parser.parse_args()
    format = formats[options.format](sys.stdout)
    doc = documenter.Documenter(format)
    module = string_to_module(args[0])
    finder.find_tests(doc, module)


if __name__ == '__main__':
    main()
